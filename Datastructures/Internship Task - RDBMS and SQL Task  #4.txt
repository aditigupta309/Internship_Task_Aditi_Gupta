Internship Task - RDBMS and SQL Task #4

CREATE DATABASE HR_Management_Application;
  USE HR_Management_Application;

-- Step 1: Create Departments Table
CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY AUTO_INCREMENT,
    DepartmentName VARCHAR(100) NOT NULL,
    ManagerID INT DEFAULT NULL
);

-- Step 2: Create Employees Table
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY AUTO_INCREMENT,
    FirstName VARCHAR(100) NOT NULL,
    LastName VARCHAR(100) NOT NULL,
    Email VARCHAR(255) UNIQUE NOT NULL,
    Phone VARCHAR(15) UNIQUE,
    HireDate DATE NOT NULL,
    DepartmentID INT,
    ManagerID INT,
    Salary DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID),
    FOREIGN KEY (ManagerID) REFERENCES Employees(EmployeeID)
);

ALTER TABLE Employees 
ADD CONSTRAINT FK_Manager FOREIGN KEY (ManagerID) REFERENCES Employees(EmployeeID);
-- Create PerformanceReviews Table
CREATE TABLE PerformanceReviews (
    ReviewID INT PRIMARY KEY AUTO_INCREMENT,
    EmployeeID INT NOT NULL,
    ReviewDate DATE NOT NULL,
    PerformanceScore ENUM('Excellent', 'Good', 'Average', 'Poor') NOT NULL,
    Comments TEXT,
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
);

-- Create Payroll Table
CREATE TABLE Payroll (
    PayrollID INT PRIMARY KEY AUTO_INCREMENT,
    EmployeeID INT NOT NULL,
    PaymentDate DATE NOT NULL,
    Amount DECIMAL(10, 2) NOT NULL,
    PaymentMethod ENUM('Bank Transfer', 'Check') NOT NULL,
    FOREIGN KEY (EmployeeID) REFERENCES Employees(EmployeeID)
);
INSERT INTO Departments (DepartmentName, ManagerID) VALUES
('HR', NULL),
('Finance', NULL),
('IT', NULL),
('Sales', NULL),
('Marketing', NULL),
('Operations', NULL),
('Support', NULL),
('Legal', NULL),
('R&D', NULL),
('Procurement', NULL);

INSERT INTO Employees (FirstName, LastName, Email, Phone, HireDate, DepartmentID, ManagerID, Salary) VALUES
('John', 'Doe', 'john.doe@example.com', '1234567890', '2023-01-15', 1, NULL, 50000),
('Jane', 'Smith', 'jane.smith@example.com', '2345678901', '2023-02-10', 2, 1, 60000),
('Mike', 'Johnson', 'mike.johnson@example.com', '3456789012', '2022-12-05', 3, 1, 55000),
('Emily', 'Davis', 'emily.davis@example.com', '4567890123', '2021-06-20', 4, 2, 65000),
('Chris', 'Brown', 'chris.brown@example.com', '5678901234', '2020-11-12', 5, 2, 70000),
('Jessica', 'Wilson', 'jessica.wilson@example.com', '6789012345', '2019-03-18', 6, 3, 48000),
('Daniel', 'Moore', 'daniel.moore@example.com', '7890123456', '2023-04-01', 7, NULL, 52000),
('Sophia', 'Taylor', 'sophia.taylor@example.com', '8901234567', '2022-01-25', 8, 4, 60000),
('James', 'Anderson', 'james.anderson@example.com', '9012345678', '2023-03-15', 9, NULL, 58000),
('Olivia', 'Martin', 'olivia.martin@example.com', '0123456789', '2021-12-01', 10, 5, 62000);

INSERT INTO PerformanceReviews (EmployeeID, ReviewDate, PerformanceScore, Comments) VALUES
(1, '2023-06-01', 'Excellent', 'Consistently exceeds expectations'),
(2, '2023-05-15', 'Good', 'Great team player'),
(3, '2023-04-20', 'Average', 'Needs improvement in communication'),
(4, '2023-03-18', 'Good', 'Strong leadership skills'),
(5, '2023-02-10', 'Poor', 'Frequently misses deadlines'),
(6, '2023-01-05', 'Good', 'Highly adaptable to new challenges'),
(7, '2023-07-01', 'Excellent', 'Outstanding problem solver'),
(8, '2023-06-25', 'Average', 'Moderate technical skills'),
(9, '2023-03-10', 'Good', 'Strong attention to detail'),
(10, '2023-02-05', 'Excellent', 'Highly creative thinker');

INSERT INTO Payroll (EmployeeID, PaymentDate, Amount, PaymentMethod) VALUES
(1, '2023-06-30', 5000, 'Bank Transfer'),
(2, '2023-06-30', 6000, 'Check'),
(3, '2023-06-30', 5500, 'Bank Transfer'),
(4, '2023-06-30', 6500, 'Check'),
(5, '2023-06-30', 7000, 'Bank Transfer'),
(6, '2023-06-30', 4800, 'Check'),
(7, '2023-06-30', 5200, 'Bank Transfer'),
(8, '2023-06-30', 6000, 'Check'),
(9, '2023-06-30', 5800, 'Bank Transfer'),
(10, '2023-06-30', 6200, 'Check');

1. Retrieve the names and contact details of employees hired after January 1, 2023.
SELECT FirstName, LastName, Email, Phone 
FROM Employees 
WHERE HireDate > '2023-01-01';
2. Find the total payroll amount paid to each department.

SELECT d.DepartmentName, SUM(p.Amount) AS TotalPayrollAmount
FROM Employees e
JOIN Payroll p ON e.EmployeeID = p.EmployeeID
JOIN Departments d ON e.DepartmentID = d.DepartmentID
GROUP BY d.DepartmentName;

3. List all employees who have not been assigned a manager.

SELECT EmployeeID, FirstName, LastName 
FROM Employees 
WHERE ManagerID IS NULL;
4. Retrieve the highest salary in each department along with the employeeâ€™s name.

SELECT d.DepartmentName, e.FirstName, e.LastName, MAX(e.Salary) AS HighestSalary
FROM Employees e
JOIN Departments d ON e.DepartmentID = d.DepartmentID
GROUP BY d.DepartmentID;
5. Find the most recent performance review for each employee.

SELECT e.FirstName, e.LastName, p.ReviewDate, p.PerformanceScore, p.Comments
FROM Employees e
JOIN PerformanceReviews p ON e.EmployeeID = p.EmployeeID
WHERE p.ReviewDate IN (
    SELECT MAX(ReviewDate)
    FROM PerformanceReviews
    WHERE EmployeeID = e.EmployeeID
);
6. Count the number of employees in each department.

SELECT d.DepartmentName, COUNT(e.EmployeeID) AS EmployeeCount
FROM Departments d
LEFT JOIN Employees e ON d.DepartmentID = e.DepartmentID
GROUP BY d.DepartmentID;
7. List all employees who have received a performance score of "Excellent."

SELECT e.FirstName, e.LastName, p.ReviewDate
FROM Employees e
JOIN PerformanceReviews p ON e.EmployeeID = p.EmployeeID
WHERE p.PerformanceScore = 'Excellent';
7 Identify the most frequently used payment method in payroll.

SELECT PaymentMethod, COUNT(*) AS UsageCount
FROM Payroll
GROUP BY PaymentMethod
ORDER BY UsageCount DESC
LIMIT 1;
8. Retrieve the top 5 highest-paid employees along with their departments.

SELECT e.FirstName, e.LastName, d.DepartmentName, e.Salary
FROM Employees e
JOIN Departments d ON e.DepartmentID = d.DepartmentID
ORDER BY e.Salary DESC
LIMIT 5;
9. Show details of all employees who report directly to a specific manager (e.g., ManagerID = 101).

SELECT e.EmployeeID, e.FirstName, e.LastName, e.Email, e.Phone
FROM Employees e
WHERE e.ManagerID = 101;









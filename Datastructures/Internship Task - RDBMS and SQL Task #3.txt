          	Internship Task - RDBMS and SQL Task #3
                    =================================
 1ST- CREATE DATABASE Database_Schema;
 2nd- USE database_schema;
 
       CREATE TABLES

CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    email VARCHAR(100),
    phone VARCHAR(20),
    address TEXT,
    join_date DATE
);

CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    category VARCHAR(50),
    price DECIMAL(10,2),
    stock_quantity INT
);


CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10,2),
    order_status VARCHAR(20),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE OrderDetails (
    order_detail_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    unit_price DECIMAL(10,2),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

============================================================================================================================================================================================

INSERT INTO Customers (customer_id, first_name, last_name, email, phone, address, join_date) 
VALUES 
(1, 'John', 'Doe', 'john.doe@example.com', '1234567890', '123 Main St, New York, NY', '2023-01-01'),
(2, 'Jane', 'Smith', 'jane.smith@example.com', '9876543210', '456 Elm St, Los Angeles, CA', '2023-02-15'),
(3, 'Sam', 'Brown', 'sam.brown@example.com', '5678901234', '789 Pine St, Chicago, IL', '2023-03-10'),
(4, 'Alice', 'Johnson', 'alice.johnson@example.com', '3456789012', '321 Maple Ave, Seattle, WA', '2023-04-01'),
(5, 'Bob', 'Williams', 'bob.williams@example.com', '4567890123', '654 Cedar St, Houston, TX', '2023-05-05'),
(6, 'Carol', 'Davis', 'carol.davis@example.com', '5678901234', '987 Spruce St, Denver, CO', '2023-06-10'),
(7, 'Eve', 'Miller', 'eve.miller@example.com', '6789012345', '123 Oak St, San Diego, CA', '2023-07-12'),
(8, 'Frank', 'Moore', 'frank.moore@example.com', '7890123456', '456 Walnut St, Austin, TX', '2023-08-15'),
(9, 'Grace', 'Taylor', 'grace.taylor@example.com', '8901234567', '789 Birch St, Miami, FL', '2023-09-20'),
(10, 'Hank', 'Anderson', 'hank.anderson@example.com', '9012345678', '321 Cherry St, Atlanta, GA', '2023-10-05');

INSERT INTO Products (product_id, product_name, category, price, stock_quantity) 
VALUES 
(101, 'Laptop', 'Electronics', 899.99, 50),
(102, 'Smartphone', 'Electronics', 699.99, 100),
(103, 'Headphones', 'Accessories', 49.99, 200),
(104, 'Desk Chair', 'Furniture', 149.99, 30),
(105, 'Coffee Table', 'Furniture', 199.99, 20),
(106, 'Washing Machine', 'Appliances', 499.99, 15),
(107, 'Refrigerator', 'Appliances', 999.99, 10),
(108, 'Microwave', 'Appliances', 249.99, 25),
(109, 'Bluetooth Speaker', 'Accessories', 79.99, 120),
(110, 'Office Desk', 'Furniture', 299.99, 40);

INSERT INTO Orders (order_id, customer_id, order_date, total_amount, order_status) 
VALUES 
(1001, 1, '2023-03-15', 949.98, 'Pending'),
(1002, 2, '2023-03-16', 699.99, 'Shipped'),
(1003, 3, '2023-03-17', 149.99, 'Delivered'),
(1004, 4, '2023-03-18', 499.99, 'Pending'),
(1005, 5, '2023-03-19', 1299.98, 'Cancelled'),
(1006, 6, '2023-03-20', 349.99, 'Shipped'),
(1007, 7, '2023-03-21', 999.99, 'Delivered'),
(1008, 8, '2023-03-22', 199.99, 'Pending'),
(1009, 9, '2023-03-23', 79.99, 'Shipped'),
(1010, 10, '2023-03-24', 299.99, 'Delivered');

INSERT INTO OrderDetails (order_detail_id, order_id, product_id, quantity, unit_price) 
VALUES 
(1, 1001, 101, 1, 899.99),
(2, 1001, 103, 1, 49.99),
(3, 1002, 102, 1, 699.99),
(4, 1003, 104, 1, 149.99),
(5, 1004, 106, 1, 499.99),
(6, 1005, 107, 1, 999.99),
(7, 1005, 108, 1, 299.99),
(8, 1006, 109, 1, 79.99),
(9, 1007, 107, 1, 999.99),
(10, 1008, 110, 1, 199.99);

INSERT INTO Payments (payment_id, order_id, payment_date, payment_amount, payment_method) 
VALUES 
(201, 1001, '2023-03-15', 949.98, 'Credit Card'),
(202, 1002, '2023-03-16', 699.99, 'PayPal'),
(203, 1003, '2023-03-17', 149.99, 'Credit Card'),
(204, 1004, '2023-03-18', 499.99, 'Debit Card'),
(205, 1005, '2023-03-19', 1299.98, 'Credit Card'),
(206, 1006, '2023-03-20', 349.99, 'PayPal'),
(207, 1007, '2023-03-21', 999.99, 'Credit Card'),
(208, 1008, '2023-03-22', 199.99, 'PayPal'),
(209, 1009, '2023-03-23', 79.99, 'Debit Card'),
(210, 1010, '2023-03-24', 299.99, 'Credit Card');
============================================================================================================================================================================================

1. Find the Total Number of Orders for Each Customer

SELECT 
    c.customer_id, 
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
    COUNT(o.order_id) AS total_orders
FROM 
    Customers c
LEFT JOIN 
    Orders o ON c.customer_id = o.customer_id
GROUP BY 
    c.customer_id, c.first_name, c.last_name;

2. Find the Total Sales Amount for Each Product (Revenue per Product)

SELECT 
    p.product_id, 
    p.product_name, 
    SUM(od.quantity * od.unit_price) AS total_revenue
FROM 
    Products p
JOIN 
    OrderDetails od ON p.product_id = od.product_id
GROUP BY 
    p.product_id, p.product_name;

3. Find the Most Expensive Product Sold

SELECT 
    p.product_id, 
    p.product_name, 
    MAX(od.unit_price) AS highest_price
FROM 
    Products p
JOIN 
    OrderDetails od ON p.product_id = od.product_id
GROUP BY 
    p.product_id, p.product_name
ORDER BY 
    highest_price DESC
LIMIT 1;

4. Get the List of Customers Who Have Placed Orders in the Last 30 Days

SELECT 
    DISTINCT c.customer_id, 
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
    c.email
FROM 
    Customers c
JOIN 
    Orders o ON c.customer_id = o.customer_id
WHERE 
    o.order_date >= CURDATE() - INTERVAL 30 DAY;

5. Calculate the Total Amount Paid by Each Customer

SELECT 
    c.customer_id, 
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
    SUM(p.payment_amount) AS total_paid
FROM 
    Customers c
JOIN 
    Orders o ON c.customer_id = o.customer_id
JOIN 
    Payments p ON o.order_id = p.order_id
GROUP BY 
    c.customer_id, c.first_name, c.last_name;

6. Get the Number of Products Sold by Category

SELECT 
    p.category, 
    SUM(od.quantity) AS total_products_sold
FROM 
    Products p
JOIN 
    OrderDetails od ON p.product_id = od.product_id
GROUP BY 
    p.category;

7. List All Orders That Are Pending (i.e., Orders That Haven't Been Shipped Yet)

SELECT 
    o.order_id, 
    o.order_date, 
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
    o.total_amount
FROM 
    Orders o
JOIN 
    Customers c ON o.customer_id = c.customer_id
WHERE 
    o.order_status = 'Pending';

8. Find the Average Order Value (Total Order Amount / Number of Orders)

SELECT 
    AVG(o.total_amount) AS average_order_value
FROM 
    Orders o;

9. List the Top 5 Customers Who Have Spent the Most Money

SELECT 
    c.customer_id, 
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
    SUM(p.payment_amount) AS total_spent
FROM 
    Customers c
JOIN 
    Orders o ON c.customer_id = o.customer_id
JOIN 
    Payments p ON o.order_id = p.order_id
GROUP BY 
    c.customer_id, c.first_name, c.last_name
ORDER BY 
    total_spent DESC
LIMIT 5;

10. Find the Products That Have Never Been Sold

SELECT 
    p.product_id, 
    p.product_name
FROM 
    Products p
LEFT JOIN 
    OrderDetails od ON p.product_id = od.product_id
WHERE 
    od.product_id IS NULL;

=========================================================================================================================================================================================












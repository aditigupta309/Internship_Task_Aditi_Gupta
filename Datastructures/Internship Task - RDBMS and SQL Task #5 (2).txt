 Internship Task - RDBMS and SQL Task #5

1st - CREATE DATABASE Zomato;
2nd - USE Zomato;

 Create Restaurants Table-
CREATE TABLE Restaurants (
    RestaurantID INT PRIMARY KEY,
    Name VARCHAR(255) NOT NULL,
    City VARCHAR(100) NOT NULL,
    CuisineType VARCHAR(50) NOT NULL,
    Rating DECIMAL(2,1) CHECK (Rating BETWEEN 0 AND 5),
    AverageCostForTwo DECIMAL(10,2) NOT NULL
);

 Create Customers Table-
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(100) NOT NULL,
    LastName VARCHAR(100) NOT NULL,
    Phone VARCHAR(15) UNIQUE NOT NULL,
    City VARCHAR(100) NOT NULL,
    JoinDate DATE NOT NULL
);

 Create Orders Table-
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT NOT NULL,
    RestaurantID INT NOT NULL,
    OrderDate DATE NOT NULL,
    OrderAmount DECIMAL(10,2) NOT NULL,
    OrderStatus VARCHAR(20) CHECK (OrderStatus IN ('Delivered', 'Cancelled', 'Pending')),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);

 Create Reviews Table--
CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY,
    CustomerID INT NOT NULL,
    RestaurantID INT NOT NULL,
    Rating DECIMAL(2,1) CHECK (Rating BETWEEN 0 AND 5),
    Comment TEXT,
    ReviewDate DATE NOT NULL,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);

 Create Payments Table
CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY,
    OrderID INT NOT NULL,
    PaymentMethod VARCHAR(20) CHECK (PaymentMethod IN ('Card', 'Cash', 'Wallet')),
    Amount DECIMAL(10,2) NOT NULL,
    PaymentDate DATE NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

1. Retrieve the names and locations of restaurants with a rating of 4.5 or higher.
SELECT 
    Name AS RestaurantName, 
    City AS Location
FROM 
    Restaurants
WHERE 
    Rating >= 4.5;

2. Find the total number of orders placed by each customer.
SELECT 
    CustomerID, 
    COUNT(OrderID) AS TotalOrders
FROM 
    Orders
GROUP BY 
    CustomerID;

3. List all restaurants offering "Italian" cuisine in "Mumbai".

SELECT 
    Name, 
    City, 
    CuisineType 
FROM 
    Restaurants 
WHERE 
    CuisineType = 'Italian' AND City = 'Mumbai';

4. Calculate the total revenue generated by each restaurant from completed orders.

SELECT 
    RestaurantID, 
    SUM(OrderAmount) AS TotalRevenue 
FROM 
    Orders 
WHERE 
    OrderStatus = 'Delivered'
GROUP BY 
    RestaurantID;

5. Retrieve the most recent order placed by each customer.

SELECT 
    o.CustomerID,
    c.FirstName,
    c.LastName,
    o.OrderID,
    o.OrderDate,
    o.OrderAmount
FROM 
    Orders o
JOIN 
    Customers c ON o.CustomerID = c.CustomerID
WHERE 
    o.OrderDate = (
        SELECT MAX(o2.OrderDate)
        FROM Orders o2
        WHERE o2.CustomerID = o.CustomerID
    );

6. List customers who have not placed any orders yet

SELECT 
    c.CustomerID, 
    c.FirstName, 
    c.LastName, 
    c.City, 
    c.Phone
FROM 
    Customers c
LEFT JOIN 
    Orders o ON c.CustomerID = o.CustomerID
WHERE 
    o.OrderID IS NULL;

7. Identify the most reviewed restaurants
SELECT 
    r.RestaurantID, 
    r.Name, 
    r.City, 
    COUNT(rv.ReviewID) AS ReviewCount
FROM 
    Restaurants r
JOIN 
    Reviews rv ON r.RestaurantID = rv.RestaurantID
GROUP BY 
    r.RestaurantID, r.Name, r.City
ORDER BY 
    ReviewCount DESC
LIMIT 1;

8. Find the most preferred payment method.

SELECT 
    PaymentMethod, 
    COUNT(PaymentID) AS UsageCount
FROM 
    Payments
GROUP BY 
    PaymentMethod
ORDER BY 
    UsageCount DESC
LIMIT 1;

9. List the top 5 restaurants by total revenue.

SELECT 
    r.RestaurantID, 
    r.Name, 
    r.City, 
    SUM(o.OrderAmount) AS TotalRevenue
FROM 
    Restaurants r
JOIN 
    Orders o ON r.RestaurantID = o.RestaurantID
GROUP BY 
    r.RestaurantID, r.Name, r.City
ORDER BY 
    TotalRevenue DESC
LIMIT 5;

10. Show the details of all cancelled orders along with the customer's and restaurant's names.

 
SELECT 
    o.OrderID, 
    o.OrderDate, 
    o.OrderAmount, 
    o.OrderStatus, 
    c.FirstName AS CustomerFirstName, 
    c.LastName AS CustomerLastName, 
    c.City AS CustomerCity, 
    r.Name AS RestaurantName, 
    r.City AS RestaurantCity
FROM 
    Orders o
JOIN 
    Customers c ON o.CustomerID = c.CustomerID
JOIN 
    Restaurants r ON o.RestaurantID = r.RestaurantID
WHERE 
    o.OrderStatus = 'Cancelled';

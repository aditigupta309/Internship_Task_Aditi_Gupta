  Internship Task - RDBMS and SOL Task #6
===========================================
1st:- CREATE DATABASE doctor;
2nd:-    USE Doctor;
============================================================================================================================================================================================
-- Patients Table

CREATE TABLE Patients (
    patient_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20) UNIQUE,
    date_of_birth DATE NOT NULL,
    gender VARCHAR(10),
    address TEXT
);

-- Departments Table

CREATE TABLE Departments (
    department_id INT PRIMARY KEY AUTO_INCREMENT,
    department_name VARCHAR(100) NOT NULL
);

-- Specialties Table

CREATE TABLE Specialties (
    specialty_id INT PRIMARY KEY AUTO_INCREMENT,
    specialty_name VARCHAR(100) NOT NULL
);

-- Doctors Table

CREATE TABLE Doctors (
    doctor_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20) UNIQUE,
    department_id INT,
    specialty_id INT,
    joining_date DATE NOT NULL,
    FOREIGN KEY (department_id) REFERENCES Departments(department_id),
    FOREIGN KEY (specialty_id) REFERENCES Specialties(specialty_id)
);


-- Appointments Table

CREATE TABLE Appointments (
    appointment_id INT PRIMARY KEY AUTO_INCREMENT,
    doctor_id INT NOT NULL,
    patient_id INT NOT NULL,
    appointment_date DATETIME NOT NULL,
    reason TEXT,
    status VARCHAR(20) CHECK (status IN ('Scheduled', 'Completed', 'Cancelled')),
    FOREIGN KEY (doctor_id) REFERENCES Doctors(doctor_id),
    FOREIGN KEY (patient_id) REFERENCES Patients(patient_id)
);

-- Payments Table

CREATE TABLE Payments (
    payment_id INT PRIMARY KEY AUTO_INCREMENT,
    appointment_id INT NOT NULL,
    payment_date DATE NOT NULL,
    payment_amount DECIMAL(10, 2) NOT NULL,
    payment_method VARCHAR(20) CHECK (payment_method IN ('Cash', 'Credit Card', 'Insurance')),
    FOREIGN KEY (appointment_id) REFERENCES Appointments(appointment_id)
);

============================================================================================================================================================================================

INSERT INTO Departments (department_name) VALUES 
('Cardiology'),
('Dermatology'),
('Orthopedics'),
('Pediatrics'),
('Neurology'),
('Oncology'),
('Radiology'),
('Anesthesiology'),
('Emergency Medicine'),
('General Surgery');

INSERT INTO Specialties (specialty_name) VALUES 
('Cardiology'),
('Dermatology'),
('Orthopedics'),
('Pediatrics'),
('Neurology'),
('Oncology'),
('Radiology'),
('Anesthesiology'),
('Emergency Medicine'),
('General Surgery');

INSERT INTO Doctors (first_name, last_name, email, phone, department_id, specialty_id, joining_date) VALUES
('John', 'Smith', 'john.smith@example.com', '1234567890', 1, 1, '2020-05-15'),
('Emily', 'Jones', 'emily.jones@example.com', '1234567891', 2, 2, '2019-03-12'),
('Michael', 'Brown', 'michael.brown@example.com', '1234567892', 3, 3, '2021-08-22'),
('Sarah', 'Taylor', 'sarah.taylor@example.com', '1234567893', 4, 4, '2018-11-10'),
('James', 'Johnson', 'james.johnson@example.com', '1234567894', 5, 5, '2022-01-30'),
('Laura', 'Wilson', 'laura.wilson@example.com', '1234567895', 6, 6, '2017-07-18'),
('David', 'Lee', 'david.lee@example.com', '1234567896', 7, 7, '2016-02-24'),
('Sophia', 'Harris', 'sophia.harris@example.com', '1234567897', 8, 8, '2015-09-05'),
('Robert', 'Clark', 'robert.clark@example.com', '1234567898', 9, 9, '2014-06-03'),
('Jessica', 'Walker', 'jessica.walker@example.com', '1234567899', 10, 10, '2023-01-01');


INSERT INTO Patients (first_name, last_name, email, phone, date_of_birth, gender, address) VALUES
('Alice', 'Smith', 'alice.smith@example.com', '2345678901', '1990-04-12', 'Female', '123 Maple Street'),
('Bob', 'Johnson', 'bob.johnson@example.com', '2345678902', '1985-06-23', 'Male', '456 Oak Street'),
('Carol', 'Williams', 'carol.williams@example.com', '2345678903', '1995-12-05', 'Female', '789 Pine Street'),
('Dave', 'Brown', 'dave.brown@example.com', '2345678904', '2000-01-15', 'Male', '101 Birch Street'),
('Eve', 'Jones', 'eve.jones@example.com', '2345678905', '1978-03-30', 'Female', '202 Cedar Street'),
('Frank', 'Miller', 'frank.miller@example.com', '2345678906', '1982-10-25', 'Male', '303 Elm Street'),
('Grace', 'Davis', 'grace.davis@example.com', '2345678907', '1993-07-09', 'Female', '404 Spruce Street'),
('Hank', 'Wilson', 'hank.wilson@example.com', '2345678908', '1965-02-18', 'Male', '505 Walnut Street'),
('Ivy', 'Taylor', 'ivy.taylor@example.com', '2345678909', '1998-11-29', 'Female', '606 Willow Street'),
('Jack', 'Anderson', 'jack.anderson@example.com', '2345678910', '1987-05-11', 'Male', '707 Ash Street');

INSERT INTO Appointments (doctor_id, patient_id, appointment_date, reason, status) VALUES
(1, 1, '2025-01-10 10:00:00', 'Routine Checkup', 'Scheduled'),
(2, 2, '2025-01-11 14:00:00', 'Skin Rash', 'Completed'),
(3, 3, '2025-01-12 09:30:00', 'Back Pain', 'Cancelled'),
(4, 4, '2025-01-13 16:00:00', 'Fever', 'Scheduled'),
(5, 5, '2025-01-14 11:15:00', 'Migraine', 'Completed'),
(6, 6, '2025-01-15 12:45:00', 'Cancer Follow-Up', 'Completed'),
(7, 7, '2025-01-16 15:30:00', 'X-Ray Review', 'Scheduled'),
(8, 8, '2025-01-17 08:00:00', 'Anesthesia Consultation', 'Completed'),
(9, 9, '2025-01-18 13:20:00', 'Emergency Checkup', 'Cancelled'),
(10, 10, '2025-01-19 10:50:00', 'Surgery Follow-Up', 'Completed');

==========================================================================================================================================================================================

1. Find the Total Number of Appointments for Each Doctor

SELECT 
    d.first_name AS DoctorFirstName, 
    d.last_name AS DoctorLastName, 
    COUNT(a.appointment_id) AS TotalAppointments
FROM Doctors d
LEFT JOIN Appointments a ON d.doctor_id = a.doctor_id
GROUP BY d.doctor_id;

2. List All Patients Who Have an Appointment with a Specific Doctor (e.g., Dr. John Smith)

SELECT 
    p.first_name AS PatientFirstName, 
    p.last_name AS PatientLastName, 
    a.appointment_date, 
    a.reason
FROM Appointments a
JOIN Patients p ON a.patient_id = p.patient_id
JOIN Doctors d ON a.doctor_id = d.doctor_id
WHERE d.first_name = 'John' AND d.last_name = 'Smith';


3. Find the Number of Appointments Scheduled in a Specific Department
SELECT 
    dep.department_name, 
    COUNT(a.appointment_id) AS TotalAppointments
FROM Departments dep
JOIN Doctors d ON dep.department_id = d.department_id
JOIN Appointments a ON d.doctor_id = a.doctor_id
WHERE dep.department_name = 'Cardiology'
GROUP BY dep.department_name;

4. Find the Most Popular Specialty Based on the Number of Appointments

SELECT 
    s.specialty_name, 
    COUNT(a.appointment_id) AS TotalAppointments
FROM Specialties s
JOIN Doctors d ON s.specialty_id = d.specialty_id
JOIN Appointments a ON d.doctor_id = a.doctor_id
GROUP BY s.specialty_id
ORDER BY TotalAppointments DESC
LIMIT 1;

5. Get the Total Payment Amount for All Completed Appointments
SELECT 
    SUM(p.payment_amount) AS TotalPayments
FROM Payments p
JOIN Appointments a ON p.appointment_id = a.appointment_id
WHERE a.status = 'Completed';

6. Find the Number of Patients Seen by Each Doctor
SELECT 
    d.first_name AS DoctorFirstName, 
    d.last_name AS DoctorLastName, 
    COUNT(DISTINCT a.patient_id) AS PatientsSeen
FROM Doctors d
LEFT JOIN Appointments a ON d.doctor_id = a.doctor_id
WHERE a.status = 'Completed'
GROUP BY d.doctor_id;

7. List All Patients Who Have Missed Their Appointments (Status 'Cancelled')
SELECT 
    p.first_name AS PatientFirstName, 
    p.last_name AS PatientLastName, 
    a.appointment_date, 
    a.reason
FROM Appointments a
JOIN Patients p ON a.patient_id = p.patient_id
WHERE a.status = 'Cancelled';

8. Find the Total Number of Appointments for Each Status (Scheduled, Completed, Cancelled)

SELECT 
    a.status, 
    COUNT(a.appointment_id) AS TotalAppointments
FROM Appointments a
GROUP BY a.status;

9. Get the Average Payment Amount for Completed Appointments

SELECT 
    AVG(p.payment_amount) AS AveragePayment
FROM Payments p
JOIN Appointments a ON p.appointment_id = a.appointment_id
WHERE a.status = 'Completed';

10. Find the Doctor with the Highest Number of Appointments
SELECT 
    d.first_name AS DoctorFirstName, 
    d.last_name AS DoctorLastName, 
    COUNT(a.appointment_id) AS TotalAppointments
FROM Doctors d
JOIN Appointments a ON d.doctor_id = a.doctor_id
GROUP BY d.doctor_id
ORDER BY TotalAppointments DESC
LIMIT 1;
============================================================================================================================================================================================







